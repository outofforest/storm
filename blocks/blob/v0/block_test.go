package v0

import (
	"testing"
	"unsafe"

	"github.com/stretchr/testify/assert"
)

func TestMappingBlobToSlice(t *testing.T) {
	assertT := assert.New(t)

	block := Block[item]{}
	checksum := block.ComputeChecksum()
	items := mapToSlice[item](block.Data[:])
	assertT.Len(items, 5461)

	items[0].ObjectID = 1
	items[0].Object.Field1 = 2
	items[0].Object.Field2 = 0x03

	items[1].ObjectID = 4
	items[1].Object.Field1 = 5
	items[1].Object.Field2 = 0x06

	items[2].ObjectID = 7
	items[2].Object.Field1 = 8
	items[2].Object.Field2 = 0x09

	items[3].ObjectID = 10
	items[3].Object.Field1 = 11
	items[3].Object.Field2 = 0x0c

	assertT.Equal([]byte{
		0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
		0xa, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xb, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		block.Data[:96])

	assertT.NotEqual(checksum, block.ComputeChecksum())
}

type item struct {
	Field1 uint64
	Field2 byte
}

func mapToSlice[T comparable](block []byte) []Object[T] {
	// TODO (wojciech): move to photon
	return unsafe.Slice((*Object[T])(unsafe.Pointer(&block[0])), int64(len(block))/int64(unsafe.Sizeof(Object[T]{})))
}
